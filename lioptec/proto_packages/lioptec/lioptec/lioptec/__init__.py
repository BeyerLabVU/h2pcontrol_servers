# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: lioptec.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Empty",
    "IsOk",
    "LaserRequest",
    "WavelengthRequest",
    "LioptecServiceStub",
    "LioptecServiceBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class Empty(betterproto2.Message):
    pass


default_message_pool.register_message("lioptec", "Empty", Empty)


@dataclass(eq=False, repr=False)
class IsOk(betterproto2.Message):
    ok: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)

    status: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("lioptec", "IsOk", IsOk)


@dataclass(eq=False, repr=False)
class LaserRequest(betterproto2.Message):
    port: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)


default_message_pool.register_message("lioptec", "LaserRequest", LaserRequest)


@dataclass(eq=False, repr=False)
class WavelengthRequest(betterproto2.Message):
    wavelength: "float" = betterproto2.field(1, betterproto2.TYPE_FLOAT)


default_message_pool.register_message("lioptec", "WavelengthRequest", WavelengthRequest)


class LioptecServiceStub:
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def connect(self, message: "LaserRequest") -> "IsOk":
        return self._channel.unary_unary(
            "/lioptec.LioptecService/Connect",
            LaserRequest.SerializeToString,
            IsOk.FromString,
        )(message)

    def set_wavelength(self, message: "WavelengthRequest") -> "IsOk":
        return self._channel.unary_unary(
            "/lioptec.LioptecService/SetWavelength",
            WavelengthRequest.SerializeToString,
            IsOk.FromString,
        )(message)

    def is_ready(self, message: "Empty | None" = None) -> "IsOk":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/lioptec.LioptecService/IsReady",
            Empty.SerializeToString,
            IsOk.FromString,
        )(message)

    def disconnect(self, message: "Empty | None" = None) -> "IsOk":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/lioptec.LioptecService/Disconnect",
            Empty.SerializeToString,
            IsOk.FromString,
        )(message)


class LioptecServiceBase(ServiceBase):
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    async def connect(self, message: "LaserRequest") -> "IsOk":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_wavelength(self, message: "WavelengthRequest") -> "IsOk":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_ready(self, message: "Empty") -> "IsOk":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def disconnect(self, message: "Empty") -> "IsOk":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_connect(
        self, stream: "grpclib.server.Stream[LaserRequest, IsOk]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.connect(request)
        await stream.send_message(response)

    async def __rpc_set_wavelength(
        self, stream: "grpclib.server.Stream[WavelengthRequest, IsOk]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_wavelength(request)
        await stream.send_message(response)

    async def __rpc_is_ready(
        self, stream: "grpclib.server.Stream[Empty, IsOk]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_ready(request)
        await stream.send_message(response)

    async def __rpc_disconnect(
        self, stream: "grpclib.server.Stream[Empty, IsOk]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.disconnect(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/lioptec.LioptecService/Connect": grpclib.const.Handler(
                self.__rpc_connect,
                grpclib.const.Cardinality.UNARY_UNARY,
                LaserRequest,
                IsOk,
            ),
            "/lioptec.LioptecService/SetWavelength": grpclib.const.Handler(
                self.__rpc_set_wavelength,
                grpclib.const.Cardinality.UNARY_UNARY,
                WavelengthRequest,
                IsOk,
            ),
            "/lioptec.LioptecService/IsReady": grpclib.const.Handler(
                self.__rpc_is_ready,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                IsOk,
            ),
            "/lioptec.LioptecService/Disconnect": grpclib.const.Handler(
                self.__rpc_disconnect,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                IsOk,
            ),
        }
