# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: picoscope_5444DMSO.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Empty",
    "VoltScale",
    "VoltScaleList",
    "ValidVoltageScalesStub",
    "ValidVoltageScalesBase",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class Empty(betterproto2.Message):
    pass


default_message_pool.register_message("picoscope_5444DMSO", "empty", Empty)


@dataclass(eq=False, repr=False)
class VoltScale(betterproto2.Message):
    valid_scale_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    valid_scale_voltage: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)


default_message_pool.register_message("picoscope_5444DMSO", "VoltScale", VoltScale)


@dataclass(eq=False, repr=False)
class VoltScaleList(betterproto2.Message):
    scales: "list[VoltScale]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "picoscope_5444DMSO", "VoltScaleList", VoltScaleList
)


class ValidVoltageScalesStub:
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_valid_voltage_scales(self, message: "Empty | None" = None) -> "VoltScale":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/picoscope_5444DMSO.ValidVoltageScales/get_valid_voltage_scales",
            Empty.SerializeToString,
            VoltScale.FromString,
        )(message)


class ValidVoltageScalesBase(ServiceBase):
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    async def get_valid_voltage_scales(self, message: "Empty") -> "VoltScale":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_valid_voltage_scales(
        self, stream: "grpclib.server.Stream[Empty, VoltScale]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_valid_voltage_scales(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/picoscope_5444DMSO.ValidVoltageScales/get_valid_voltage_scales": grpclib.const.Handler(
                self.__rpc_get_valid_voltage_scales,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                VoltScale,
            ),
        }
