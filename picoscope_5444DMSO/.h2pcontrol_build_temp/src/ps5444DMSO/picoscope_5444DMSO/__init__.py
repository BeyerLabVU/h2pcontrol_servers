# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: picoscope_5444DMSO.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AllTraces",
    "ChannelTrace",
    "Empty",
    "Timestamp",
    "VoltScale",
    "VoltScaleListResponse",
    "StreamAllTracesStub",
    "StreamAllTracesBase",
    "ValidVoltageScalesStub",
    "ValidVoltageScalesBase",
)

from collections.abc import AsyncIterator, Iterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server

betterproto2.check_compiler_version("0.4.0")


@dataclass(eq=False, repr=False)
class AllTraces(betterproto2.Message):
    traces: "list[ChannelTrace]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("picoscope_5444DMSO", "AllTraces", AllTraces)


@dataclass(eq=False, repr=False)
class ChannelTrace(betterproto2.Message):
    channel_idx: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)

    sample_interval_ns: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)

    volt_scale_volts: "float" = betterproto2.field(3, betterproto2.TYPE_FLOAT)

    timestamp: "Timestamp | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )

    trace: "list[float]" = betterproto2.field(
        100, betterproto2.TYPE_FLOAT, repeated=True
    )


default_message_pool.register_message(
    "picoscope_5444DMSO", "ChannelTrace", ChannelTrace
)


@dataclass(eq=False, repr=False)
class Empty(betterproto2.Message):
    pass


default_message_pool.register_message("picoscope_5444DMSO", "empty", Empty)


@dataclass(eq=False, repr=False)
class Timestamp(betterproto2.Message):
    """
    From google.protobuf
    """

    seconds: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Represents seconds of UTC time since Unix epoch
    1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    9999-12-31T23:59:59Z inclusive.
    """

    nanos: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Non-negative fractions of a second at nanosecond resolution. Negative
    second values with fractions must still have non-negative nanos values
    that count forward in time. Must be from 0 to 999,999,999
    inclusive.
    """


default_message_pool.register_message("picoscope_5444DMSO", "Timestamp", Timestamp)


@dataclass(eq=False, repr=False)
class VoltScale(betterproto2.Message):
    valid_scale_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    valid_scale_voltage: "float" = betterproto2.field(2, betterproto2.TYPE_FLOAT)


default_message_pool.register_message("picoscope_5444DMSO", "VoltScale", VoltScale)


@dataclass(eq=False, repr=False)
class VoltScaleListResponse(betterproto2.Message):
    scales: "list[VoltScale]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "picoscope_5444DMSO", "VoltScaleListResponse", VoltScaleListResponse
)


class StreamAllTracesStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_traces(self, message: "Empty | None" = None) -> "Iterator[AllTraces]":
        if message is None:
            message = Empty()

        for response in self._channel.unary_stream(
            "/picoscope_5444DMSO.StreamAllTraces/stream_traces",
            Empty.SerializeToString,
            AllTraces.FromString,
        )(message):
            yield response


class ValidVoltageScalesStub:
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_valid_voltage_scales(
        self, message: "Empty | None" = None
    ) -> "VoltScaleListResponse":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/picoscope_5444DMSO.ValidVoltageScales/get_valid_voltage_scales",
            Empty.SerializeToString,
            VoltScaleListResponse.FromString,
        )(message)


class StreamAllTracesBase(ServiceBase):
    async def stream_traces(self, message: "Empty") -> "AsyncIterator[AllTraces]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_traces(
        self, stream: "grpclib.server.Stream[Empty, AllTraces]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.stream_traces,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/picoscope_5444DMSO.StreamAllTraces/stream_traces": grpclib.const.Handler(
                self.__rpc_stream_traces,
                grpclib.const.Cardinality.UNARY_STREAM,
                Empty,
                AllTraces,
            ),
        }


class ValidVoltageScalesBase(ServiceBase):
    """
    Implement your grpc proto file here.
    Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/
    """

    async def get_valid_voltage_scales(
        self, message: "Empty"
    ) -> "VoltScaleListResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_valid_voltage_scales(
        self, stream: "grpclib.server.Stream[Empty, VoltScaleListResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_valid_voltage_scales(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/picoscope_5444DMSO.ValidVoltageScales/get_valid_voltage_scales": grpclib.const.Handler(
                self.__rpc_get_valid_voltage_scales,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                VoltScaleListResponse,
            ),
        }
