syntax = "proto3";

package picoscope_5444DMSO;

// Implement your grpc proto file here.
// Introduction to gRPC: https://grpc.io/docs/what-is-grpc/introduction/

service PicoscopeUtils {
    rpc get_valid_voltage_scales(empty) returns (VoltScaleList);
    rpc get_valid_time_scales(empty) returns (TimeScaleList);

    rpc get_valid_trigger_types(empty) returns (TriggerTypeList);
    rpc get_valid_coupling_types(empty) returns (CouplingTypeList);
    rpc parse_timebase(TimebaseRequest) returns (TimebaseResponse);
    rpc get_shortest_timebase(empty) returns (TimebaseResponse);

    rpc configure_channel(ChannelRequest) returns (ChannelResponse);
    rpc configure_trigger(TriggerConfig) returns (ChannelResponse);
    rpc configure_timebase(TimebaseRequest) returns (TimebaseResponse);

    rpc start_loop(empty) returns (ChannelResponse);
    rpc stop_loop(empty) returns (ChannelResponse);
    rpc stream_traces(empty) returns (stream AllTraces);
}

message empty {}

message ChannelRequest {
    int32 channel_idx = 1; // 0 for channel A, 1 for channel B, etc.
    bool activate = 2; // true to activate the channel, false to deactivate
    int32 trace_resolution_bits = 3; // Resolution of the trace in bits
    int32 channel_coupling = 4; // 0:DC coupling, 1:AC coupling
    VoltScale channel_voltage_scale = 5; // Voltage scale for the channel, e.g. 1V, 2V, etc.
    float analog_offset_volts = 6; // Offset of the center of the voltage range from 0V
}

message ChannelResponse {
    bool success = 1; // True if the channel was successfully activated or deactivated
    string message = 2; // Additional information or error message
}

message AllTraces {
    repeated ChannelTrace traces = 1;
}

message ChannelTrace {
    int32 channel_idx = 1;
    int32 channel_data_idx = 2; // Set to zero if the only data is the trace.  For some acquisition modes, there may be more than one data stream for channel, e.g. min, max, mean from picoscope

    int32 sample_interval_ns = 21;
    int32 trigger_holdoff_ns = 22;

    int32 trace_resolution_bits = 31;
    float volt_scale_volts = 32; // This represents the +/- range of the oscilloscope, so the full range is double the value passed here
    float volt_offset_volts = 33; // Offset of the center of the voltage range from 0V

    int32 number_captures = 81; // For multiple acquisitions of waveforms, e.g. Picoscope Rapid Block Mode
    int32 accumulation_method = 82; // 0 for single-shot acquisition.  1: Averaging

    Timestamp timestamp = 91;
    int32 acquisition_mode = 92;  // TODO: determine a mapping from Picoscope modes to integers
    int32 osci_coupling = 93; // 0:DC coupling, 1:AC coupling

    int32 trace_length = 100;
    repeated float trace = 101;
    repeated float times = 102;
}

message TimebaseRequest {
    int32 timebase_idx = 1; // Index of the timebase to use
    int32 n_samples_post_trigger = 2; // Number of samples to capture after the trigger
    int32 n_samples_pre_trigger = 3; // Number of samples to capture before the trigger
}

message TimebaseResponse {
    int32 timebase_idx = 1; // Index of the timebase used
    int32 sample_interval_ns = 2; // Resultant sample interval in nanoseconds
    string description = 3; // Error message if any, empty if successful
    bool success = 4; // True if the timebase was successfully parsed
}

message CouplingTypeList {
    repeated CouplingType couplings = 1;
}

message CouplingType {
    int32 coupling_idx = 1;
    string description = 2; // Description of the coupling type
}

message TriggerConfig {
    int32 trigger_channel_idx = 1; // 0 for channel A, 1 for channel B, etc.
    TriggerType trigger_type = 2; // See picoscope_utils.py
    float trigger_level_volts = 3; // Voltage level for the trigger
    int32 trigger_holdoff_ns = 4; // Holdoff time in nanoseconds
}

message TriggerTypeList {
    repeated TriggerType trigger_types = 1;
}

message TriggerType {
    int32 trigger_type_idx = 1; // Index of the trigger type
    string description = 2; // Description of the trigger type
}

message VoltScaleList {
    repeated VoltScale scales = 1;
}

message VoltScale {
    string ValidScaleName    = 1;
    float  ValidScaleVoltage = 2;
}

message TimeScaleList {
    repeated TimeScale scales = 1;
}

message TimeScale {
    string valid_scale_name    = 1;
    int32  valid_scale_interval_ns = 2; // Sample interval in nanoseconds
}

// From google.protobuf
message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}